<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Using MongoDB to Implement a Sem</title>
</head>

<body>

<h2>Using MongoDB to Implement a Semantic Database - Part II</h2>
<p>There are some flaws in the prototype that I implemented in Part I.&nbsp; 
These are revealed immediately when we create a semantic type such as a 
Date:</p>
<pre>public static Schema CreateDateSchema()
{
  return Helpers.InstantiateSchema(@&quot;
  {
    name: 'date', 
    subTypes:
    [
      {
        name: 'month',
        concreteTypes:
        [
          {name: 'value', alias: 'month', type: 'System.Int32'}
        ],
        subtypes:
        [
          {
            name: 'monthName',
            subtypes:
            [
              {
                name: 'name',
                concreteTypes:
                [
                  {name: 'name', alias: 'monthName', type: 'System.String'}
                ]
              }
            ]
          }
        ]
      },
      {
        name: 'day',
        concreteTypes:
        [
          {name: 'value', alias: 'day', type: 'System.Int32'}
        ]
      },
      {
        name: 'year',
        concreteTypes:
        [
          {name: 'value', alias: 'year', type: 'System.Int32'}
        ]
      }
    ]
  }&quot;);
}</pre>
<p><img border="0" src="unittest.png" width="14" height="32"></p>
<pre>[TestMethod]
public void CreateDateSchemaTest()
{
  SemanticDatabase sd = Helpers.CreateCleanDatabase();
  Assert.IsTrue(sd.GetCollections().Count == 0, &quot;Collection should be 0 length.&quot;);
  Schema schema = Helpers.CreateDateSchema();
  sd.InstantiateSchema(schema);
  List&lt;string&gt; collections = sd.GetCollections();
  Assert.IsTrue(collections.Count == 6);
  Assert.IsTrue(collections.Contains(&quot;date&quot;));
  Assert.IsTrue(collections.Contains(&quot;month&quot;));
  Assert.IsTrue(collections.Contains(&quot;day&quot;));
  Assert.IsTrue(collections.Contains(&quot;year&quot;));
  Assert.IsTrue(collections.Contains(&quot;name&quot;));
  Assert.IsTrue(collections.Contains(&quot;monthName&quot;));
}</pre>
<p>There are several problems here:</p>
<ol>
	<li>Because the same field name is used, the current implementation to 
	insert records into the hierarchy doesn't know which is the correct value.</li>
	<li>The root node is abstract -- it has no concrete types.&nbsp; The 
	implementation in Part I doesn't support querying a semantic instance with 
	an abstract root node.</li>
	<li>The field name &quot;value&quot; is used repeatedly, which will cause collisions 
	(just like it does in SQL) when we project the fields to a flattened list 
	(like a SQL view).</li>
	<li>Problem #2 also affects being able to perform insert/update/delete 
	operations, again because the field names for different values are all the 
	same: &quot;value&quot;.</li>
</ol>
<h3>The Insert Problem</h3>
<p>Let's fix the first problem by inserting a partial date that does not 
conflict with duplicate field name problem.&nbsp; </p>
<pre>sd.Insert(schema, BsonDocument.Parse(&quot;{value: 8, name: 'August'}&quot;));</pre>
<p>Because the field name value is shared with other types, we get strange 
results, like this:</p>
<p><img border="0" src="insertProblem1.png" width="573" height="191"></p>
<p>We shouldn't even have a record in the &quot;day&quot; collection, and it certainly 
shouldn't have a &quot;name&quot; field!</p>
<p>We fix the first problem by inserting only the fields associated with the 
current schema object:</p>
<pre>BsonDocument currentObject = GetConcreteObjects(schema, doc);
BsonDocument withRef = AddRef1(currentObject);
id = Insert(schema.Name, withRef);</pre>
<p>instead of:</p>
<pre>BsonDocument withRef = AddRef1(doc);
id = Insert(schema.Name, withRef);</pre>
<p>Next, we note that the &quot;date&quot; object has references to &quot;date and year.&nbsp; </p>
<p><img border="0" src="insertProblem2.png" width="595" height="209"></p>
<p>Why?&nbsp; Because the &quot;value&quot; field is used for those semantic types as 
well.&nbsp; </p>
<h4>Enter Aliases</h4>
<p>There are two ways this problem could be solved: </p>
<ol>
	<li>by passing in the actual hierarchy that we want to insert (this 
	definitely has its benefits, and is something to explore at some point).</li>
<li>by using aliases.</li>
</ol>
<p>For now, I'm opting for the second approach (shown in the JSON above) because I like to work, on the 
front-end as it were, with a flat record (aka a view) as this works well with 
UI's and I don't want to burden the client-side with unnecessary knowledge of 
the internal implementation of the semantic type hierarchy.</p>
<p>This requires a refactoring of our concrete types, which currently is 
implemented as:</p>
<pre>public Dictionary&lt;string, Type&gt; ConcreteTypes { get; set; }</pre>
<p>and now would be better implemented as:</p>
<pre>public List&lt;ConcreteType&gt; ConcreteTypes { get; set; }</pre>
<p>And also results in a refactoring of the test schemas, which wasn't that bad.&nbsp; 
Here's an example of what a simple schema looks like now:</p>
<pre>Schema schema = Helpers.InstantiateSchema(@&quot;
{
  name: 'phoneNumber', 
  concreteTypes:
  [
    {name: 'areaCode', alias: 'areaCode', type: 'System.String'},
    {name: 'exchange', alias: 'areaCode', type: 'System.String'},
    {name: 'subscriberId', alias: 'areaCode', type: 'System.String'}
  ]
}&quot;);</pre>
<p>After refactoring, the test now uses aliases (all the other test code that 
doesn't use aliases yet still works, because those tests didn't deal with this 
issue):</p>
<p><img border="0" src="unittest.png" width="14" height="32"></p>
<pre>[TestMethod]
public void InsertOnlyMonthTest()
{
  SemanticDatabase sd = Helpers.CreateCleanDatabase();
  Assert.IsTrue(sd.GetCollections().Count == 0, &quot;Collection should be 0 length.&quot;);
  Schema schema = Helpers.CreateDateSchema();
  sd.InstantiateSchema(schema);
  List&lt;string&gt; collections = sd.GetCollections();
  Assert.IsTrue(collections.Count == 6);

  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, monthName: 'August'}&quot;));
}
</pre>
<p>Inspecting the aggregate query:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'}
)</pre>
<p>We get the desired graph:</p>
<p><img border="0" src="date1.png" width="624" height="355"></p>
<p>We can then assert that our client-side graph returns the aliased &quot;view&quot;:</p>
<pre>sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, monthName: 'August'}&quot;));

List&lt;BsonDocument&gt; docs = sd.Query(schema);
Assert.IsTrue(docs.Count == 1);
Assert.IsTrue(docs[0].ToString()==&quot;{ \&quot;month\&quot; : 8, \&quot;monthName\&quot; : \&quot;August\&quot; }&quot;);</pre>
<p>Unfortunately, because this is a partial instance and our schema expects a 
full instance of the type definition, our server-side-query fails when it tries 
to do a left outer join on &quot;day&quot;, which is empty.&nbsp; Here's where we are 
before the unwind of &quot;day&quot;:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'},
{$lookup: {from: 'day', localField:'dayId', foreignField: '_id', as: 'day'} }
)</pre>
<p><img border="0" src="serversidequery1.png" width="578" height="185"></p>
<p>And if we now add the unwind for &quot;day&quot;:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'},
{$lookup: {from: 'day', localField:'dayId', foreignField: '_id', as: 'day'} },
{$unwind: '$day'}
)</pre>
<p>we get 0 records returned!</p>
<p>Sadly, we cannot add a conditional at this point.&nbsp; This fails:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'},
{$lookup: {from: 'day', localField:'dayId', foreignField: '_id', as: 'day'} },
{$unwind: '$day'},
{$cond: [ {$eq: [{$size: '$day'}, 0]}, {$unwind: '$day'}, {value:0} ] }
)</pre>
<p>with:</p>
<p><img border="0" src="fail1.png" width="645" height="189"></p>
<p>So we add a piece to our test that verifies that our server-side query of a 
partial instance fails:</p>
<pre>docs = sd.QueryServerSide(schema);
Assert.IsTrue(docs.Count == 0, &quot;Partial semantic instance expected to fail with $lookup aggregator.&quot;);</pre>
<p>I haven't been able to figure out a workaround to this issue.</p>
<p>If we insert the full structure that matches the schema:</p>
<p><img border="0" src="unittest.png" width="14" height="32"></p>
<pre>[TestMethod]
public void InsertFullDateTest()
{
  SemanticDatabase sd = Helpers.CreateCleanDatabase();
  Assert.IsTrue(sd.GetCollections().Count == 0, &quot;Collection should be 0 length.&quot;);
  Schema schema = Helpers.CreateDateSchema();
  sd.InstantiateSchema(schema);
  List&lt;string&gt; collections = sd.GetCollections();
  Assert.IsTrue(collections.Count == 6);

  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, monthName: 'August', day: 19, year: 1962}&quot;));

  List&lt;BsonDocument&gt; docs = sd.Query(schema);
  Assert.IsTrue(docs.Count == 1);
  Assert.IsTrue(docs[0].ToString() == &quot;{ \&quot;month\&quot; : 8, \&quot;monthName\&quot; : \&quot;August\&quot;, \&quot;day\&quot; : 19, \&quot;year\&quot; : 1962 }&quot;);

  docs = sd.QueryServerSide(schema);
  Assert.IsTrue(docs.Count == 1);
  Assert.IsTrue(docs[0].ToString() == &quot;{ \&quot;month\&quot; : 8, \&quot;monthName\&quot; : \&quot;August\&quot;, \&quot;day\&quot; : 19, \&quot;year\&quot; : 1962 }&quot;);
}</pre>
<p>We get the expected result -- note the aliased field names are returned.</p>
<p><img border="0" src="key-small.jpg" width="94" height="33"></p>
<p>Semantic relationships are not necessarily intuitive:</p>
<ul>
	<li>The suggests that what we insert should match our schema -- we shouldn't 
	be providing partial data against our schema.</li>
	<li>The month name is really a separate collection that we should <i>
	dynamically</i> associate with, rather than the embedded lookup that we've 
	coded here.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Discovering Associations, aka Shared Meaning</h2>
<p>Being able to discover implicit associations is one of the unique 
features of a semantic database.&nbsp; Given three semantic types:</p>
<ol>
	<li>Person</li>
	<li>Date</li>
<li>MonthLookup</li>
</ol>
<p>implemented with the following semantic schema:</p>
<p><img border="0" src="threefoldSchema.png" width="677" height="299"></p>
<p>Our &quot;discovery&quot; method determines the following associations (left-to-right 
is bottom-most to top-most):</p>
<pre>month &lt;- monthLookup
month &lt;- date

name &lt;- monthName &lt;- monthLookup
name &lt;- firstName &lt;- personName &lt;- person

name &lt;- monthName &lt;- monthLookup
name &lt;- lastName &lt;- personName &lt;- person

name &lt;- monthAbbr &lt;- monthLookup
name &lt;- firstName &lt;- personName &lt;- person

name &lt;- monthAbbr &lt;- monthLookup
name &lt;- lastName &lt;- personName &lt;- person</pre>
<p>From this, we could construct a query where we can say &quot;give me all the dates 
whose month's name is also the person's first name&quot;.&nbsp; This 
would follow the association chain like this:</p>
<p><img border="0" src="associations1.png" width="390" height="110"></p>
<p><img border="0" src="key-small.jpg" width="94" height="33"></p>
<p>In a non-semantic database, we could not automatically discover these associations because 
field names like &quot;month&quot; and &quot;firstName&quot; have no intrinsic semantic meaning.</p>
<h3>Some Sample Data</h3>
<p>Let's populate the database with some data:</p>
<pre>protected void InstantiateMonthLookup(SemanticDatabase sd, Schema schema)
{
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 1, monthName: 'January', monthAbbr: 'Jan'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 2, monthName: 'February', monthAbbr: 'Feb'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 3, monthName: 'March', monthAbbr: 'Mar'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 4, monthName: 'April', monthAbbr: 'Apr'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 5, monthName: 'May', monthAbbr: 'May'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 6, monthName: 'June', monthAbbr: 'Jun'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 7, monthName: 'July', monthAbbr: 'Jul'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, monthName: 'August', monthAbbr: 'Aug'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 9, monthName: 'September', monthAbbr: 'Sep'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 10, monthName: 'October', monthAbbr: 'Oct'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 11, monthName: 'November', monthAbbr: 'Nov'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 12, monthName: 'December', monthAbbr: 'Dec'}&quot;));
}

protected void InstantiateDate(SemanticDatabase sd, Schema schema)
{
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, day: 19, year: 1962}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 4, day: 1, year: 2016}&quot;));
}

protected void InstantiatePerson(SemanticDatabase sd, Schema schema)
{
  sd.Insert(schema, BsonDocument.Parse(&quot;{firstName: 'Marc', lastName: 'Clifton'}&quot;));
  sd.Insert(schema, BsonDocument.Parse(&quot;{firstName: 'April', lastName: 'Jones'}&quot;));
}</pre>
<h3>Create An Associative Query to Mine Shared Meaning</h3>
<p>We can now write a mongo query (the database gets its name not just from 
being able to store lots of documents):</p>
<pre>db.firstName.aggregate(
// firstName -&gt; name
{ $lookup: {from: 'name', localField: 'nameId', foreignField: '_id', as: 'fname'} },
{ $unwind: '$fname' },

// name -&gt; monthName -&gt; monthLookup
{ $lookup: {from: 'monthName', localField: 'fname._id', foreignField: 'nameId', as: 'monthName'} },
{ $unwind: '$monthName' },
{ $lookup: {from: 'monthLookup', localField: 'monthName._id', foreignField: 'monthNameId', as: 'monthLookup'} },
{ $unwind: '$monthLookup'},

// monthLookup -&gt; month
{ $lookup: {from: 'month', localField: 'monthLookup.monthId', foreignField: '_id', as: 'month'} },
{ $unwind: '$month'},

// month -&gt; date
{ $lookup: {from: 'date', localField: 'month._id', foreignField: 'monthId', as: 'date'} },
{ $unwind: '$date'},

// date.day -&gt; day.value
{ $lookup: {from: 'day', localField: 'date.dayId', foreignField: '_id', as: 'day'} },
{ $unwind: '$day'},

// date.year -&gt; year.value
{ $lookup: {from: 'year', localField: 'date.yearId', foreignField: '_id', as: 'year'} },
{ $unwind: '$year'},

{ $project: {'monthName': '$fname.name', 'month': '$month.value', 'day': '$day.value', 'year': '$year.value', '_id':0} }
)</pre>
<h3>The Result</h3>
<p>This gives us all the people who's first names matches the month name of dates in 
the system.</p>
<p><img border="0" src="fnamemonthdate.png" width="293" height="132"></p>
<p><img border="0" src="key-small.jpg" width="94" height="33"></p>
<p>What we've achieved here is quite interesting!&nbsp; Because our database is 
<i>semantic</i>, the system knows that things like &quot;month&quot; and &quot;name&quot; have a 
shared meaning, so we can ask the schema &quot;what entities have shared meaning&quot; and 
we can weave through the hierarchies of the semantic types to combine types into 
new and interesting queries.&nbsp; This kind of query could of course be 
expressed in SQL (and perhaps more simply), but we would be comparing 
non-semantic field values that the <i>programmer</i> decided had shared meaning, 
rather than the <i>system discovering the shared meaning</i>.&nbsp; By letting 
the system discover the shared meaning, the <i>user</i>, not the programmer, can 
make new and interesting associations.</p>
<p>&nbsp;</p>
<h2>Explicit Associations</h2>
<p>Explicit associations are made between two semantic types.&nbsp; When we 
explicitly create an association, say between schemata A and B, the following 
structure is created:</p>
<p><img border="0" src="associations2.png" width="570" height="366"></p>
<p>The abstract types are the semantic hierarchy that is created for us.&nbsp; 
While this looks overly complicated, it has the benefit of creating a hierarchy 
of semantic meaning for the association.</p>
<h3>A-B Associations</h3>
<p>We can create an explicit association between person and date types:</p>
<pre>Schema dateSchema = Helpers.CreatePureDateSchema();
Schema personSchema = Helpers.CreatePersonSchema();
Schema personDateSchema = sd.Associate(personSchema, dateSchema);

string personId = sd.Insert(personSchema, BsonDocument.Parse(&quot;{firstName: 'Marc', lastName: 'Clifton'}&quot;));
string dateId = sd.Insert(dateSchema, BsonDocument.Parse(&quot;{month: 8, day: 19, year: 1962}&quot;));

BsonDocument doc = new BsonDocument(&quot;personId&quot;, new ObjectId(personId));
doc.Add(&quot;dateId&quot;, new ObjectId(dateId));
doc.Add(&quot;forwardAssociationName&quot;, &quot;birthdate&quot;);
doc.Add(&quot;reverseAssociationName&quot;, &quot;birthdate&quot;);
sd.Insert(personDateSchema, doc);</pre>
<p>Here we are creating an association for &quot;birthdate.&quot;&nbsp; We can 
inspect the association collections in RoboMongo:</p>
<p><img border="0" src="collections1.png" width="241" height="304"></p>
<p>This also includes the other semantic types as well.</p>
<h3>A-A Associations</h3>
<p>Not all association names identical in both directions.&nbsp; For example, 
here's an association between two people -- note the shared schema and how the 
association Id field name is adjusted for us:</p>
<pre>Schema personSchema = Helpers.CreatePersonSchema();
Schema personPersonSchema = sd.Associate(personSchema, personSchema);

string personId1 = sd.Insert(personSchema, BsonDocument.Parse(&quot;{firstName: 'Marc', lastName: 'Clifton'}&quot;));
string personId2 = sd.Insert(personSchema, BsonDocument.Parse(&quot;{firstName: 'Elisabeth', lastName: 'Clifton'}&quot;));

BsonDocument doc = new BsonDocument(&quot;person1Id&quot;, new ObjectId(personId1));
doc.Add(&quot;person2Id&quot;, new ObjectId(personId2));
doc.Add(&quot;forwardAssociationName&quot;, &quot;son&quot;); // Marc is the son of Elisabeth
doc.Add(&quot;reverseAssociationName&quot;, &quot;mother&quot;); // Elisabeth is the mother of Marc
sd.Insert(personPersonSchema, doc);</pre>
<p>Here, the forward association name is &quot;son&quot; and the reverse association name 
is &quot;mother.&quot;</p>
<p><img border="0" src="colllections2.png" width="242" height="228"></p>
<h3>Actor (or Perpetrator) Associations</h3>
<p>Actor associations are associations between two types in which a third type 
is involved.&nbsp; For example, ?????</p>
<h3>Association Lifetime</h3>
<p>Associations can:</p>
<ul>
	<li>Be permanent, such as a &quot;parent-child&quot; relationship between two person 
	types.</li>
	<li>Be an event, such as purchasing a property or committing a crime.</li>
	<li>Have duration, such as ownership of the property or a loan.</li>
</ul>
<p><img border="0" src="thinking.png" width="117" height="117"></p>
<p>Associations with dates, like &quot;birth date&quot; and &quot;death date&quot;, are a strange 
exception because the association is made between an entity and a date type, 
where the date type itself is a fixed date--the association between the entity 
and the date, while permanent and event-ish, does not have a duration -- the 
association with a date type implies a permanent event.&nbsp; It's a bit weird.&nbsp; 
Association lifetime really applies only between two concrete entities, not a 
concrete entity and an abstract concept like &quot;date.&quot;</p>
<p>Many associations however do have a temporal event or duration associated 
with them.&nbsp; For example:</p>
<ul>
	<li>Person - Property: Can have a &quot;purchase date&quot;, &quot;sold date&quot;, etc.</li>
	<li>Person - Person: Can have a &quot;marriage date&quot;, &quot;divorce date&quot;, etc</li>
	<li>Person - Crime: Will have an event date, possibly a duration: &quot;was 
	engaged in recording the DNC's private meetings...&quot;</li>
</ul>
<p>Since associations are implemented as first class semantic types, we can 
associate<i> the association </i>&nbsp;to a date, time, datetime, or any other 
semantic type:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>