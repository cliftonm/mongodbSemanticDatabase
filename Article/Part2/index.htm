<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Using MongoDB to Implement a Sem</title>
</head>

<body>

<h2>Using MongoDB to Implement a Semantic Database - Part II</h2>
<p>There are some flaws in the prototype that I implemented in Part I.&nbsp; 
These are revealed immediately when we create a semantic type such as a 
Date:</p>
<pre>public static Schema CreateDateSchema()
{
  return Helpers.InstantiateSchema(@&quot;
  {
    name: 'date', 
    subTypes:
    [
      {
        name: 'month',
        concreteTypes:
        [
          {name: 'value', alias: 'month', type: 'System.Int32'}
        ],
        subtypes:
        [
          {
            name: 'monthName',
            subtypes:
            [
              {
                name: 'name',
                concreteTypes:
                [
                  {name: 'name', alias: 'monthName', type: 'System.String'}
                ]
              }
            ]
          }
        ]
      },
      {
        name: 'day',
        concreteTypes:
        [
          {name: 'value', alias: 'day', type: 'System.Int32'}
        ]
      },
      {
        name: 'year',
        concreteTypes:
        [
          {name: 'value', alias: 'year', type: 'System.Int32'}
        ]
      }
    ]
  }&quot;);
}</pre>
<p><img border="0" src="unittest.png" width="14" height="32"></p>
<pre>[TestMethod]
public void CreateDateSchemaTest()
{
  SemanticDatabase sd = Helpers.CreateCleanDatabase();
  Assert.IsTrue(sd.GetCollections().Count == 0, &quot;Collection should be 0 length.&quot;);
  Schema schema = Helpers.CreateDateSchema();
  sd.InstantiateSchema(schema);
  List&lt;string&gt; collections = sd.GetCollections();
  Assert.IsTrue(collections.Count == 6);
  Assert.IsTrue(collections.Contains(&quot;date&quot;));
  Assert.IsTrue(collections.Contains(&quot;month&quot;));
  Assert.IsTrue(collections.Contains(&quot;day&quot;));
  Assert.IsTrue(collections.Contains(&quot;year&quot;));
  Assert.IsTrue(collections.Contains(&quot;name&quot;));
  Assert.IsTrue(collections.Contains(&quot;monthName&quot;));
}</pre>
<p>There are several problems here:</p>
<ol>
	<li>Because the same field name is used, the current implementation to 
	insert records into the hierarchy doesn't know which is the correct value.</li>
	<li>The root node is abstract -- it has no concrete types.&nbsp; The 
	implementation in Part I doesn't support querying a semantic instance with 
	an abstract root node.</li>
	<li>The field name &quot;value&quot; is used repeatedly, which will cause collisions 
	(just like it does in SQL) when we project the fields to a flattened list 
	(like a SQL view).</li>
	<li>Problem #2 also affects being able to perform insert/update/delete 
	operations, again because the field names for different values are all the 
	same: &quot;value&quot;.</li>
</ol>
<h3>The Insert Problem</h3>
<p>Let's fix the first problem by inserting a partial date that does not 
conflict with duplicate field name problem.&nbsp; </p>
<pre>sd.Insert(schema, BsonDocument.Parse(&quot;{value: 8, name: 'August'}&quot;));</pre>
<p>Because the field name value is shared with other types, we get strange 
results, like this:</p>
<p><img border="0" src="insertProblem1.png" width="573" height="191"></p>
<p>We shouldn't even have a record in the &quot;day&quot; collection, and it certainly 
shouldn't have a &quot;name&quot; field!</p>
<p>We fix the first problem by inserting only the fields associated with the 
current schema object:</p>
<pre>BsonDocument currentObject = GetConcreteObjects(schema, doc);
BsonDocument withRef = AddRef1(currentObject);
id = Insert(schema.Name, withRef);</pre>
<p>instead of:</p>
<pre>BsonDocument withRef = AddRef1(doc);
id = Insert(schema.Name, withRef);</pre>
<p>Next, we note that the &quot;date&quot; object has references to &quot;date and year.&nbsp; </p>
<p><img border="0" src="insertProblem2.png" width="595" height="209"></p>
<p>Why?&nbsp; Because the &quot;value&quot; field is used for those semantic types as 
well.&nbsp; </p>
<h4>Enter Aliases</h4>
<p>There are two ways this problem could be solved: </p>
<ol>
	<li>by passing in the actual hierarchy that we want to insert (this 
	definitely has its benefits, and is something to explore at some point).</li>
<li>by using aliases.</li>
</ol>
<p>For now, I'm opting for the second approach (shown in the JSON above) because I like to work, on the 
front-end as it were, with a flat record (aka a view) as this works well with 
UI's and I don't want to burden the client-side with unnecessary knowledge of 
the internal implementation of the semantic type hierarchy.</p>
<p>This requires a refactoring of our concrete types, which currently is 
implemented as:</p>
<pre>public Dictionary&lt;string, Type&gt; ConcreteTypes { get; set; }</pre>
<p>and now would be better implemented as:</p>
<pre>public List&lt;ConcreteType&gt; ConcreteTypes { get; set; }</pre>
<p>And also results in a refactoring of the test schemas, which wasn't that bad.&nbsp; 
Here's an example of what a simple schema looks like now:</p>
<pre>Schema schema = Helpers.InstantiateSchema(@&quot;
{
  name: 'phoneNumber', 
  concreteTypes:
  [
    {name: 'areaCode', alias: 'areaCode', type: 'System.String'},
    {name: 'exchange', alias: 'areaCode', type: 'System.String'},
    {name: 'subscriberId', alias: 'areaCode', type: 'System.String'}
  ]
}&quot;);</pre>
<p>After refactoring, the test now uses aliases (all the other test code that 
doesn't use aliases yet still works, because those tests didn't deal with this 
issue):</p>
<p><img border="0" src="unittest.png" width="14" height="32"></p>
<pre>[TestMethod]
public void InsertOnlyMonthTest()
{
  SemanticDatabase sd = Helpers.CreateCleanDatabase();
  Assert.IsTrue(sd.GetCollections().Count == 0, &quot;Collection should be 0 length.&quot;);
  Schema schema = Helpers.CreateDateSchema();
  sd.InstantiateSchema(schema);
  List&lt;string&gt; collections = sd.GetCollections();
  Assert.IsTrue(collections.Count == 6);

  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, monthName: 'August'}&quot;));
}
</pre>
<p>Inspecting the aggregate query:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'}
)</pre>
<p>We get the desired graph:</p>
<p><img border="0" src="date1.png" width="624" height="355"></p>
<p>We can then assert that our client-side graph returns the aliased &quot;view&quot;:</p>
<pre>sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, monthName: 'August'}&quot;));

List&lt;BsonDocument&gt; docs = sd.Query(schema);
Assert.IsTrue(docs.Count == 1);
Assert.IsTrue(docs[0].ToString()==&quot;{ \&quot;month\&quot; : 8, \&quot;monthName\&quot; : \&quot;August\&quot; }&quot;);</pre>
<p>Unfortunately, because this is a partial instance and our schema expects a 
full instance of the type definition, our server-side-query fails when it tries 
to do a left outer join on &quot;day&quot;, which is empty.&nbsp; Here's where we are 
before the unwind of &quot;day&quot;:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'},
{$lookup: {from: 'day', localField:'dayId', foreignField: '_id', as: 'day'} }
)</pre>
<p><img border="0" src="serversidequery1.png" width="578" height="185"></p>
<p>And if we now add the unwind for &quot;day&quot;:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'},
{$lookup: {from: 'day', localField:'dayId', foreignField: '_id', as: 'day'} },
{$unwind: '$day'}
)</pre>
<p>we get 0 records returned!</p>
<p>Sadly, we cannot add a conditional at this point.&nbsp; This fails:</p>
<pre>db.date.aggregate(
{$lookup: {from: 'month', localField:'monthId', foreignField: '_id', as: 'month'} },
{$unwind: '$month'},
{$lookup: {from: 'monthName', localField:'month.monthNameId', foreignField: '_id', as: 'monthName'} },
{$unwind: '$monthName'},
{$lookup: {from: 'name', localField:'monthName.nameId', foreignField: '_id', as: 'name'} },
{$unwind: '$name'},
{$lookup: {from: 'day', localField:'dayId', foreignField: '_id', as: 'day'} },
{$unwind: '$day'},
{$cond: [ {$eq: [{$size: '$day'}, 0]}, {$unwind: '$day'}, {value:0} ] }
)</pre>
<p>with:</p>
<p><img border="0" src="fail1.png" width="645" height="189"></p>
<p>So we add a piece to our test that verifies that our server-side query of a 
partial instance fails:</p>
<pre>docs = sd.QueryServerSide(schema);
Assert.IsTrue(docs.Count == 0, &quot;Partial semantic instance expected to fail with $lookup aggregator.&quot;);</pre>
<p>I haven't been able to figure out a workaround to this issue.</p>
<p>If we insert the full structure that matches the schema:</p>
<p><img border="0" src="unittest.png" width="14" height="32"></p>
<pre>[TestMethod]
public void InsertFullDateTest()
{
  SemanticDatabase sd = Helpers.CreateCleanDatabase();
  Assert.IsTrue(sd.GetCollections().Count == 0, &quot;Collection should be 0 length.&quot;);
  Schema schema = Helpers.CreateDateSchema();
  sd.InstantiateSchema(schema);
  List&lt;string&gt; collections = sd.GetCollections();
  Assert.IsTrue(collections.Count == 6);

  sd.Insert(schema, BsonDocument.Parse(&quot;{month: 8, monthName: 'August', day: 19, year: 1962}&quot;));

  List&lt;BsonDocument&gt; docs = sd.Query(schema);
  Assert.IsTrue(docs.Count == 1);
  Assert.IsTrue(docs[0].ToString() == &quot;{ \&quot;month\&quot; : 8, \&quot;monthName\&quot; : \&quot;August\&quot;, \&quot;day\&quot; : 19, \&quot;year\&quot; : 1962 }&quot;);

  docs = sd.QueryServerSide(schema);
  Assert.IsTrue(docs.Count == 1);
  Assert.IsTrue(docs[0].ToString() == &quot;{ \&quot;month\&quot; : 8, \&quot;monthName\&quot; : \&quot;August\&quot;, \&quot;day\&quot; : 19, \&quot;year\&quot; : 1962 }&quot;);
}</pre>
<p>We get the expected result -- note the aliased field names are returned.</p>
<p><img border="0" src="key-small.jpg" width="94" height="33"></p>
<p>Semantic relationships are not necessarily intuitive:</p>
<ul>
	<li>The suggests that what we insert should match our schema -- we shouldn't 
	be providing partial data against our schema.</li>
	<li>The month name is really a separate collection that we should <i>
	dynamically</i> associate with, rather than the embedded lookup that we've 
	coded here.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>